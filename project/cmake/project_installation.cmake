set(RUNTIME_INSTALL_DESTINATION bin)
set(LIBRARY_INSTALL_DESTINATION lib)

if(MSVC OR APPLE OR EMSCRIPTEN)
	set(README_INSTALL_DESTINATION .)
	set(DATA_INSTALL_DESTINATION data)
	set(SHADERS_INSTALL_DESTINATION data/shaders)
	set(SYMBOLS_INSTALL_DESTINATION ${RUNTIME_INSTALL_DESTINATION})
else()
	set(README_INSTALL_DESTINATION share/doc/${NCPROJECT_LOWER_NAME})
	set(DATA_INSTALL_DESTINATION share/${NCPROJECT_LOWER_NAME}/data)
	set(SHADERS_INSTALL_DESTINATION share/${NCPROJECT_LOWER_NAME}/shaders)
	set(SYMBOLS_INSTALL_DESTINATION lib/debug)
endif()

set(CPACK_NCPROJECT_NAME "${NCPROJECT_NAME}")
set(CPACK_PACKAGE_VENDOR ${NCPROJECT_VENDOR})
set(CPACK_PACKAGE_DESCRIPTION ${NCPROJECT_DESCRIPTION})
set(CPACK_PACKAGE_HOMEPAGE_URL ${NCPROJECT_HOMEPAGE})
set(CPACK_PACKAGE_VERSION ${NCPROJECT_VERSION})
set(CPACK_PACKAGE_VERSION_MAJOR ${NCPROJECT_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${NCPROJECT_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${NCPROJECT_VERSION_PATCH})
set(CPACK_PACKAGE_INSTALL_DIRECTORY "${NCPROJECT_NAME}")
if(EXISTS "${CMAKE_SOURCE_DIR}/LICENSE")
	set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/LICENSE")
endif()
set(CPACK_PACKAGE_CHECKSUM MD5)

if(MSVC)
	set(CPACK_GENERATOR NSIS ZIP)
	set(CPACK_NSIS_MUI_ICON "${NCPROJECT_ICONS_DIR}/icon.ico")
	set(CPACK_NSIS_COMPRESSOR "/SOLID lzma")
	# Custom NSIS commands needed in order to set the "Start in" property of the start menu shortcut
	set(CPACK_NSIS_CREATE_ICONS_EXTRA
		"SetOutPath '$INSTDIR\\\\bin'
		CreateShortCut '$SMPROGRAMS\\\\$STARTMENU_FOLDER\\\\${NCPROJECT_NAME}.lnk' '$INSTDIR\\\\bin\\\\${NCPROJECT_EXE_NAME}.exe'
		CreateShortCut '$DESKTOP\\\\${NCPROJECT_NAME}.lnk' '$INSTDIR\\\\bin\\\\${NCPROJECT_EXE_NAME}.exe'
		SetOutPath '$INSTDIR'")
	set(CPACK_NSIS_DELETE_ICONS_EXTRA
		"Delete '$SMPROGRAMS\\\\$MUI_TEMP\\\\${NCPROJECT_NAME}.lnk'
		Delete '$DESKTOP\\\\${NCPROJECT_NAME}.lnk'")

	if(NCPROJECT_INSTALL_SYSLIBS)
		include(InstallRequiredSystemLibraries)
	endif()

	set(NCPROJECT_SYSTEM_NAME "Win64")
	if("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 17 2022")
		set(NCPROJECT_COMPILER "VS2022")
	elseif("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 16 2019")
		set(NCPROJECT_COMPILER "VS2019")
	elseif("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 15 2017")
		set(NCPROJECT_COMPILER "VS2017")
	endif()
elseif(APPLE)
	set(CPACK_GENERATOR "Bundle")
	set(CPACK_BUNDLE_NAME ${NCPROJECT_NAME})
	set(FRAMEWORKS_INSTALL_DESTINATION ../Frameworks)

	configure_file(${NCPROJECT_ROOT}/Info.plist.in ${CMAKE_BINARY_DIR}/Info.plist @ONLY)
	set(CPACK_BUNDLE_PLIST ${CMAKE_BINARY_DIR}/Info.plist)

	file(RELATIVE_PATH RELPATH_TO_BIN ${CMAKE_INSTALL_PREFIX}/MacOS ${CMAKE_INSTALL_PREFIX}/Resources/${RUNTIME_INSTALL_DESTINATION})
	file(WRITE ${CMAKE_BINARY_DIR}/bundle_executable "#!/usr/bin/env sh\ncd \"$(dirname \"$0\")\" \ncd ${RELPATH_TO_BIN} && ./${NCPROJECT_EXE_NAME}")
	install(FILES ${CMAKE_BINARY_DIR}/bundle_executable DESTINATION ../MacOS/ RENAME ${CPACK_BUNDLE_NAME}
		PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)

	if(EXISTS ${NCPROJECT_ICONS_DIR}/icon1024.png)
		add_custom_command(
			OUTPUT ${CMAKE_BINARY_DIR}/${CPACK_BUNDLE_NAME}.iconset
			COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/${CPACK_BUNDLE_NAME}.iconset
			COMMAND ${CMAKE_COMMAND} -E copy_if_different ${NCPROJECT_ICONS_DIR}/icon1024.png ${CMAKE_BINARY_DIR}/${CPACK_BUNDLE_NAME}.iconset/icon_512x512@2x.png
			COMMAND sips -z 512 512 ${NCPROJECT_ICONS_DIR}/icon1024.png --out ${CMAKE_BINARY_DIR}/${CPACK_BUNDLE_NAME}.iconset/icon_512x512.png
			COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/${CPACK_BUNDLE_NAME}.iconset/icon_512x512.png ${CMAKE_BINARY_DIR}/${CPACK_BUNDLE_NAME}.iconset/icon_256x256@2x.png
			COMMAND sips -z 256 256 ${NCPROJECT_ICONS_DIR}/icon1024.png --out ${CMAKE_BINARY_DIR}/${CPACK_BUNDLE_NAME}.iconset/icon_256x256.png
			COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/${CPACK_BUNDLE_NAME}.iconset/icon_256x256.png ${CMAKE_BINARY_DIR}/${CPACK_BUNDLE_NAME}.iconset/icon_128x128@2x.png
			COMMAND sips -z 128 128 ${NCPROJECT_ICONS_DIR}/icon1024.png --out ${CMAKE_BINARY_DIR}/${CPACK_BUNDLE_NAME}.iconset/icon_128x128.png
			COMMAND sips -z 64 64 ${NCPROJECT_ICONS_DIR}/icon1024.png --out ${CMAKE_BINARY_DIR}/${CPACK_BUNDLE_NAME}.iconset/icon_32x32@2x.png
			COMMAND sips -z 32 32 ${NCPROJECT_ICONS_DIR}/icon1024.png --out ${CMAKE_BINARY_DIR}/${CPACK_BUNDLE_NAME}.iconset/icon_32x32.png
			COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/${CPACK_BUNDLE_NAME}.iconset/icon_32x32.png ${CMAKE_BINARY_DIR}/${CPACK_BUNDLE_NAME}.iconset/icon_16x16@2x.png
			COMMAND sips -z 16 16 ${NCPROJECT_ICONS_DIR}/icon1024.png --out ${CMAKE_BINARY_DIR}/${CPACK_BUNDLE_NAME}.iconset/icon_16x16.png
			COMMAND iconutil --convert icns --output ${CMAKE_BINARY_DIR}/${CPACK_BUNDLE_NAME}.icns ${CMAKE_BINARY_DIR}/${CPACK_BUNDLE_NAME}.iconset)
		add_custom_target(iconutil_convert ALL DEPENDS ${CMAKE_BINARY_DIR}/${CPACK_BUNDLE_NAME}.iconset)
		set(CPACK_BUNDLE_ICON ${CMAKE_BINARY_DIR}/${CPACK_BUNDLE_NAME}.icns)
	endif()
elseif(EMSCRIPTEN)
	if(CMAKE_HOST_WIN32)
		set(CPACK_GENERATOR ZIP)
	else()
		set(CPACK_GENERATOR TGZ)
	endif()
elseif(UNIX AND NOT APPLE)
	set(CPACK_GENERATOR TGZ)
	set(ICONS_INSTALL_DESTINATION share/icons/hicolor)

	if(EXISTS ${NCPROJECT_ICONS_DIR}/icon1024.png)
		install(FILES ${NCPROJECT_ICONS_DIR}/icon1024.png DESTINATION ${ICONS_INSTALL_DESTINATION}/1024x1024/apps/ RENAME ${NCPROJECT_LOWER_NAME}.png COMPONENT data)
	endif()
	if(EXISTS ${NCPROJECT_ICONS_DIR}/icon192.png)
		install(FILES ${NCPROJECT_ICONS_DIR}/icon192.png DESTINATION ${ICONS_INSTALL_DESTINATION}/192x192/apps/ RENAME ${NCPROJECT_LOWER_NAME}.png COMPONENT data)
	endif()
	if(EXISTS ${NCPROJECT_ICONS_DIR}/icon96.png)
		install(FILES ${NCPROJECT_ICONS_DIR}/icon96.png DESTINATION ${ICONS_INSTALL_DESTINATION}/96x96/apps/ RENAME ${NCPROJECT_LOWER_NAME}.png COMPONENT data)
	endif()
	if(EXISTS ${NCPROJECT_ICONS_DIR}/icon72.png)
		install(FILES ${NCPROJECT_ICONS_DIR}/icon72.png DESTINATION ${ICONS_INSTALL_DESTINATION}/72x72/apps/ RENAME ${NCPROJECT_LOWER_NAME}.png COMPONENT data)
	endif()
	if(EXISTS ${NCPROJECT_ICONS_DIR}/icon48.png)
		install(FILES ${NCPROJECT_ICONS_DIR}/icon48.png DESTINATION ${ICONS_INSTALL_DESTINATION}/48x48/apps/ RENAME ${NCPROJECT_LOWER_NAME}.png COMPONENT data)
	endif()

	configure_file(${NCPROJECT_ROOT}/project.desktop ${CMAKE_BINARY_DIR}/${NCPROJECT_DESKTOP_FILE} @ONLY)
	install(FILES ${CMAKE_BINARY_DIR}/${NCPROJECT_DESKTOP_FILE} DESTINATION share/applications)

	set(NCPROJECT_SYSTEM_NAME "Linux")
	if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
		set(NCPROJECT_COMPILER "GCC")
	elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
		set(NCPROJECT_COMPILER "Clang")
	endif()
elseif(MINGW)
	set(CPACK_GENERATOR TGZ)

	set(NCPROJECT_SYSTEM_NAME "MinGW")
	if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
		set(NCPROJECT_COMPILER "GCC")
	elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
		set(NCPROJECT_COMPILER "Clang")
	endif()
endif()

# Custom override of CPack package name
if(DEFINED NCPROJECT_SYSTEM_NAME)
	if(DEFINED NCPROJECT_COMPILER)
		set(CPACK_PACKAGE_FILE_NAME ${CPACK_NCPROJECT_NAME}-${CPACK_PACKAGE_VERSION}-${NCPROJECT_SYSTEM_NAME}-${NCPROJECT_COMPILER})
	else()
		set(CPACK_PACKAGE_FILE_NAME ${CPACK_NCPROJECT_NAME}-${CPACK_PACKAGE_VERSION}-${NCPROJECT_SYSTEM_NAME})
	endif()
endif()

include(CPack)

install(TARGETS ${NCPROJECT_EXE_NAME} RUNTIME DESTINATION ${RUNTIME_INSTALL_DESTINATION})
install(FILES README.md DESTINATION ${README_INSTALL_DESTINATION})
if((MSVC OR APPLE) AND EXISTS "${CMAKE_SOURCE_DIR}/LICENSE")
	install(FILES LICENSE DESTINATION . RENAME LICENSE.txt)
endif()

if(NOT EMSCRIPTEN)
	install(DIRECTORY ${NCPROJECT_DATA_DIR}/data/ DESTINATION ${DATA_INSTALL_DESTINATION})
else()
	install(FILES ${CMAKE_BINARY_DIR}/${NCPROJECT_EXE_NAME}.html DESTINATION ${RUNTIME_INSTALL_DESTINATION})
	install(FILES ${CMAKE_BINARY_DIR}/${NCPROJECT_EXE_NAME}.data DESTINATION ${RUNTIME_INSTALL_DESTINATION})
	install(FILES ${CMAKE_BINARY_DIR}/${NCPROJECT_EXE_NAME}.wasm DESTINATION ${RUNTIME_INSTALL_DESTINATION})
	if(EXISTS ${CMAKE_BINARY_DIR}/${NCPROJECT_EXE_NAME}.worker.js)
		install(FILES ${CMAKE_BINARY_DIR}/${NCPROJECT_EXE_NAME}.worker.js DESTINATION ${RUNTIME_INSTALL_DESTINATION})
	endif()
	if(EXISTS ${CMAKE_BINARY_DIR}/favicon.ico)
		install(FILES ${CMAKE_BINARY_DIR}/favicon.ico DESTINATION ${RUNTIME_INSTALL_DESTINATION})
	endif()
endif()
install(FILES ${NCPROJECT_DATA_DIR}/README.md DESTINATION ${DATA_INSTALL_DESTINATION})
if(IS_DIRECTORY ${NCINE_SHADERS_DIR})
	install(DIRECTORY ${NCINE_SHADERS_DIR} DESTINATION ${SHADERS_INSTALL_DESTINATION})
endif()

if(MSVC)
	if(NCINE_DYNAMIC_LIBRARY)
		install(FILES ${NCINE_LOCATION} DESTINATION ${RUNTIME_INSTALL_DESTINATION})
	endif()

	if(EXISTS ${NCINE_CONFIG_H})
		if(ANGLE_FOUND AND NCINE_WITH_ANGLE)
			get_target_property(EGL_IMPORTED_LOCATION EGL::EGL IMPORTED_LOCATION)
			install(FILES ${EGL_IMPORTED_LOCATION} DESTINATION ${RUNTIME_INSTALL_DESTINATION})
			get_target_property(GLES_IMPORTED_LOCATION OpenGLES::GLES IMPORTED_LOCATION)
			install(FILES ${GLES_IMPORTED_LOCATION} DESTINATION ${RUNTIME_INSTALL_DESTINATION})
		endif()
		if(GLEW_FOUND AND NCINE_WITH_GLEW)
			get_target_property(GLEW_IMPORTED_LOCATION GLEW::GLEW IMPORTED_LOCATION)
			install(FILES ${GLEW_IMPORTED_LOCATION} DESTINATION ${RUNTIME_INSTALL_DESTINATION})
		endif()
		if(GLFW_FOUND AND NCINE_WITH_GLFW)
			get_target_property(GLFW_IMPORTED_LOCATION GLFW::GLFW IMPORTED_LOCATION)
			install(FILES ${GLFW_IMPORTED_LOCATION} DESTINATION ${RUNTIME_INSTALL_DESTINATION})
		endif()
		if(SDL2_FOUND AND NCINE_WITH_SDL)
			get_target_property(SDL2_IMPORTED_LOCATION SDL2::SDL2 IMPORTED_LOCATION)
			install(FILES ${SDL2_IMPORTED_LOCATION} DESTINATION ${RUNTIME_INSTALL_DESTINATION})
		endif()
		if(PNG_FOUND AND NCINE_WITH_PNG)
			get_target_property(ZLIB_IMPORTED_LOCATION ZLIB::ZLIB IMPORTED_LOCATION)
			install(FILES ${ZLIB_IMPORTED_LOCATION} DESTINATION ${RUNTIME_INSTALL_DESTINATION})
			get_target_property(PNG_IMPORTED_LOCATION PNG::PNG IMPORTED_LOCATION)
			install(FILES ${PNG_IMPORTED_LOCATION} DESTINATION ${RUNTIME_INSTALL_DESTINATION})
		endif()
		if(WEBP_FOUND AND NCINE_WITH_WEBP)
			get_target_property(WEBP_IMPORTED_LOCATION WebP::WebP IMPORTED_LOCATION)
			install(FILES ${WEBP_IMPORTED_LOCATION} DESTINATION ${RUNTIME_INSTALL_DESTINATION})

			if(TARGET WebP::SharpYUV)
				get_target_property(SHARPYUV_IMPORTED_LOCATION WebP::SharpYUV IMPORTED_LOCATION)
				install(FILES ${SHARPYUV_IMPORTED_LOCATION} DESTINATION ${RUNTIME_INSTALL_DESTINATION})
			endif()
		endif()
		if(OPENAL_FOUND AND NCINE_WITH_AUDIO)
			get_target_property(OPENAL_IMPORTED_LOCATION OpenAL::AL IMPORTED_LOCATION)
			install(FILES ${OPENAL_IMPORTED_LOCATION} DESTINATION ${RUNTIME_INSTALL_DESTINATION})

			if(VORBIS_FOUND AND NCINE_WITH_VORBIS)
				get_target_property(OGG_IMPORTED_LOCATION Ogg::Ogg IMPORTED_LOCATION)
				install(FILES ${OGG_IMPORTED_LOCATION} DESTINATION ${RUNTIME_INSTALL_DESTINATION})
				get_target_property(VORBIS_IMPORTED_LOCATION Vorbis::Vorbis IMPORTED_LOCATION)
				install(FILES ${VORBIS_IMPORTED_LOCATION} DESTINATION ${RUNTIME_INSTALL_DESTINATION})
				get_target_property(VORBISFILE_IMPORTED_LOCATION Vorbis::Vorbisfile IMPORTED_LOCATION)
				install(FILES ${VORBISFILE_IMPORTED_LOCATION} DESTINATION ${RUNTIME_INSTALL_DESTINATION})
			endif()
		endif()
		if(LUA_FOUND AND NCINE_WITH_LUA)
			get_target_property(LUA_IMPORTED_LOCATION Lua::Lua IMPORTED_LOCATION)
			install(FILES ${LUA_IMPORTED_LOCATION} DESTINATION ${RUNTIME_INSTALL_DESTINATION})
		endif()
	else()
		install(DIRECTORY ${MSVC_BINDIR}/ DESTINATION ${RUNTIME_INSTALL_DESTINATION} FILES_MATCHING PATTERN "*.dll")
	endif()
elseif(APPLE)
	if(NCINE_DYNAMIC_LIBRARY)
		file(RELATIVE_PATH RELPATH_TO_LIB ${CMAKE_INSTALL_PREFIX}/${RUNTIME_INSTALL_DESTINATION}/ ${CMAKE_INSTALL_PREFIX}/${LIBRARY_INSTALL_DESTINATION})
		install(FILES ${NCINE_LOCATION} DESTINATION ${LIBRARY_INSTALL_DESTINATION})
	else()
		# If the engine has been built statically the application needs to find the frameworks
		file(RELATIVE_PATH RELPATH_TO_LIB ${CMAKE_INSTALL_PREFIX}/${RUNTIME_INSTALL_DESTINATION}/ ${CMAKE_INSTALL_PREFIX}/${FRAMEWORKS_INSTALL_DESTINATION})
	endif()
	set_target_properties(${NCPROJECT_EXE_NAME} PROPERTIES INSTALL_RPATH "@executable_path/${RELPATH_TO_LIB}")

	if(EXISTS ${NCINE_CONFIG_H})
		if(IS_DIRECTORY ${FRAMEWORKS_DIR}/glew.framework AND NCINE_WITH_GLEW)
			install(DIRECTORY ${FRAMEWORKS_DIR}/glew.framework DESTINATION ${FRAMEWORKS_INSTALL_DESTINATION})
		endif()
		if(IS_DIRECTORY ${FRAMEWORKS_DIR}/glfw.framework AND NCINE_WITH_GLFW)
			install(DIRECTORY ${FRAMEWORKS_DIR}/glfw.framework DESTINATION ${FRAMEWORKS_INSTALL_DESTINATION})
		endif()
		if(IS_DIRECTORY ${FRAMEWORKS_DIR}/sdl2.framework AND NCINE_WITH_SDL)
			install(DIRECTORY ${FRAMEWORKS_DIR}/sdl2.framework DESTINATION ${FRAMEWORKS_INSTALL_DESTINATION})
		endif()
		if(IS_DIRECTORY ${FRAMEWORKS_DIR}/zlib.framework AND IS_DIRECTORY ${FRAMEWORKS_DIR}/png.framework AND NCINE_WITH_PNG)
			install(DIRECTORY ${FRAMEWORKS_DIR}/zlib.framework DESTINATION ${FRAMEWORKS_INSTALL_DESTINATION})
			install(DIRECTORY ${FRAMEWORKS_DIR}/png.framework DESTINATION ${FRAMEWORKS_INSTALL_DESTINATION})
		endif()
		if(IS_DIRECTORY ${FRAMEWORKS_DIR}/webp.framework AND NCINE_WITH_WEBP)
			install(DIRECTORY ${FRAMEWORKS_DIR}/webp.framework DESTINATION ${FRAMEWORKS_INSTALL_DESTINATION})
		endif()
		if(IS_DIRECTORY ${FRAMEWORKS_DIR}/openal.framework AND NCINE_WITH_AUDIO)
			install(DIRECTORY ${FRAMEWORKS_DIR}/openal.framework DESTINATION ${FRAMEWORKS_INSTALL_DESTINATION})

			if(IS_DIRECTORY ${FRAMEWORKS_DIR}/ogg.framework AND IS_DIRECTORY ${FRAMEWORKS_DIR}/vorbis.framework AND
			   IS_DIRECTORY ${FRAMEWORKS_DIR}/vorbisfile.framework AND NCINE_WITH_VORBIS)
				install(DIRECTORY ${FRAMEWORKS_DIR}/ogg.framework DESTINATION ${FRAMEWORKS_INSTALL_DESTINATION})
				install(DIRECTORY ${FRAMEWORKS_DIR}/vorbis.framework DESTINATION ${FRAMEWORKS_INSTALL_DESTINATION})
				install(DIRECTORY ${FRAMEWORKS_DIR}/vorbisfile.framework DESTINATION ${FRAMEWORKS_INSTALL_DESTINATION})
			endif()
		endif()
		if(IS_DIRECTORY ${FRAMEWORKS_DIR}/lua.framework AND NCINE_WITH_LUA)
			install(DIRECTORY ${FRAMEWORKS_DIR}/lua.framework DESTINATION ${FRAMEWORKS_INSTALL_DESTINATION})
		endif()
	else()
		install(DIRECTORY ${FRAMEWORKS_DIR}/ DESTINATION ${FRAMEWORKS_INSTALL_DESTINATION})
	endif()
endif()

if(NCPROJECT_WITH_CRASHPAD)
	if(EXISTS ${CRASHPAD_HANDLER_EXE})
		install(FILES ${CRASHPAD_HANDLER_EXE} DESTINATION ${RUNTIME_INSTALL_DESTINATION})
	endif()
endif()
if(IS_DIRECTORY ${DEBUGINFO_DIR} AND ${NCPROJECT_DEBUGINFO} STREQUAL "INSTALL")
	# Put the symbols files directly inside the destination directory
	install(DIRECTORY ${DEBUGINFO_DIR}/ DESTINATION ${SYMBOLS_INSTALL_DESTINATION} COMPONENT symbols)
endif()
