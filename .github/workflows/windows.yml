name: 'Windows'

env:
  LIBRARIES_BRANCH: libraries-OS-COMPILER
  DEPLOY_MESSAGE:
    "Push artifact from GitHub Actions build ${{ github.run_number }} with id ${{ github.run_id }}

     - nCine artifact from branch 'BRANCH_NAME' with commit id ${{ github.sha }}"
  DEPLOY_BRANCH: nCine-BRANCH_NAME-OS-COMPILER

on: [push, workflow_dispatch]

jobs:
  Windows:
    strategy:
      fail-fast: false
      matrix:
        BuildType: [Debug, Release, DevDist, LuaDist]

    runs-on: 'windows-2022'

    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4

    - name: 'Unshallow Git Repository for Versioning'
      if: matrix.BuildType == 'DevDist' || matrix.BuildType == 'LuaDist'
      run: |
        $env:GIT_REDIRECT_STDERR = '2>&1'
        git fetch --unshallow; if (-not $?) { return }

    - name: 'Download nCine-libraries Artifacts and nCine-data'
      run: |
        $env:GIT_REDIRECT_STDERR = '2>&1'

        cd ..
        git clone https://github.com/nCine/nCine-libraries-artifacts.git
        cd nCine-libraries-artifacts

        $env:LIBRARIES_BRANCH = $env:LIBRARIES_BRANCH -replace "OS","windows" -replace "COMPILER","vs2022"
        git checkout $env:LIBRARIES_BRANCH
        $env:LIBRARIES_FILE = Get-ChildItem -Path $(pwd) -Name -File | Select-Object -First 1
        7z x $env:LIBRARIES_FILE

        Move-Item -Path nCine-external -Destination ..

        git checkout android-libraries-armeabi-v7a
        $env:LIBRARIES_FILE = Get-ChildItem -Path $(pwd) -Filter *.gz -Name -File | Select-Object -First 1
        7z x $env:LIBRARIES_FILE
        $env:LIBRARIES_FILE = $env:LIBRARIES_FILE -replace ".gz",""
        7z x $env:LIBRARIES_FILE -aos

        git checkout android-libraries-arm64-v8a
        $env:LIBRARIES_FILE = Get-ChildItem -Path $(pwd) -Filter *.gz -Name -File | Select-Object -First 1
        7z x $env:LIBRARIES_FILE
        $env:LIBRARIES_FILE = $env:LIBRARIES_FILE -replace ".gz",""
          7z x $env:LIBRARIES_FILE -aos

        git checkout android-libraries-x86_64
        $env:LIBRARIES_FILE = Get-ChildItem -Path $(pwd) -Filter *.gz -Name -File | Select-Object -First 1
        7z x $env:LIBRARIES_FILE
        $env:LIBRARIES_FILE = $env:LIBRARIES_FILE -replace ".gz",""
        7z x $env:LIBRARIES_FILE -aos

        Move-Item -Path nCine-android-external -Destination ..
        cd ..
        Remove-Item nCine-libraries-artifacts -Recurse -Force

        git clone https://github.com/nCine/nCine-data.git

    - name: 'Download RenderDoc API Header'
      if: matrix.BuildType != 'DevDist' && matrix.BuildType != 'LuaDist'
      run: |
        mkdir ..\RenderDoc
        cd ..\RenderDoc
        curl -fsSL https://raw.githubusercontent.com/baldurk/renderdoc/v1.x/renderdoc/api/app/renderdoc_app.h -o renderdoc_app.h

    - name: 'CMake Configuration, Build and Test'
      if: matrix.BuildType != 'DevDist' && matrix.BuildType != 'LuaDist'
      run: |
        cmake -G "Visual Studio 17 2022" -A x64 -B ../nCine-buildtests-${{ matrix.BuildType }} -D NCINE_OPTIONS_PRESETS=UnitTests
        cmake --build ../nCine-buildtests-${{ matrix.BuildType }} --config ${{ matrix.BuildType }} -j $env:NUMBER_OF_PROCESSORS
        cd ../nCine-buildtests-${{ matrix.BuildType }}
        ctest -j $env:NUMBER_OF_PROCESSORS --build-config ${{ matrix.BuildType }}

    - name: 'CMake Configuration'
      run: |
        if ("${{ matrix.BuildType }}" -eq "DevDist" -Or "${{ matrix.BuildType }}" -eq "LuaDist")
          { cmake -G "Visual Studio 17 2022" -A x64 -B ../nCine-build-${{ matrix.BuildType }} -D NCINE_OPTIONS_PRESETS=${{ matrix.BuildType }} -D NDK_DIR=$env:ANDROID_NDK_LATEST_HOME }
        else
          { cmake -G "Visual Studio 17 2022" -A x64 -B ../nCine-build-${{ matrix.BuildType }} -D NCINE_BUILD_BENCHMARKS=ON -D NCINE_WITH_TRACY=ON -D NCINE_WITH_RENDERDOC=ON -D RENDERDOC_DIR=$(pwd)/../RenderDoc }

    - name: 'CMake Build'
      run: |
        if ("${{ matrix.BuildType }}" -eq "DevDist" -Or "${{ matrix.BuildType }}" -eq "LuaDist")
          { cmake --build ../nCine-build-${{ matrix.BuildType }} --config Release -j $env:NUMBER_OF_PROCESSORS }
        else
          { cmake --build ../nCine-build-${{ matrix.BuildType }} --config ${{ matrix.BuildType }} -j $env:NUMBER_OF_PROCESSORS }

    - name: 'Package'
      if: matrix.BuildType == 'DevDist' || matrix.BuildType == 'LuaDist'
      run: |
        cmake --build ../nCine-build-${{ matrix.BuildType }} --config Release --target package

    - name: 'Push Artifacts'
      if: matrix.BuildType == 'DevDist' || matrix.BuildType == 'LuaDist'
      env:
        PUBLIC_REPO_TOKEN: ${{ secrets.PUBLIC_REPO_TOKEN }}
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        $env:GIT_REDIRECT_STDERR = '2>&1'

        $env:branch_name = git describe --tags --exact-match; if (-not $?) { $env:branch_name = git symbolic-ref -q --short HEAD }; if (-not $?) { $env:branch_name = git rev-parse --short HEAD }
        $env:DEPLOY_MESSAGE = $env:DEPLOY_MESSAGE -replace "BRANCH_NAME",$env:branch_name

        $env:DEPLOY_BRANCH = $env:DEPLOY_BRANCH -replace "BRANCH_NAME",$env:branch_name
        $env:DEPLOY_BRANCH = $env:DEPLOY_BRANCH -replace "OS","windows" -replace "COMPILER","vs2022"
        $env:package_ext0 = "exe"
        $env:package_ext1 = "zip"

        cd ..\nCine-build-${{ matrix.BuildType }}
        Set-Content -Path package_name.cmake -Value 'include(CPackConfig.cmake)','execute_process(COMMAND ${CMAKE_COMMAND} -E echo_append "${CPACK_PACKAGE_NAME}")'
        $env:package_name = cmake -P package_name.cmake
        Set-Content -Path package_file_name.cmake -Value 'include(CPackConfig.cmake)','execute_process(COMMAND ${CMAKE_COMMAND} -E echo_append "${CPACK_PACKAGE_FILE_NAME}")'
        $env:package_file_name = cmake -P package_file_name.cmake

        cd ..
        git clone https://$env:PUBLIC_REPO_TOKEN@github.com/nCine/nCine-artifacts.git 2>&1>$null
        cd nCine-artifacts
        git checkout $env:DEPLOY_BRANCH; if (-not $?) { git checkout --orphan $env:DEPLOY_BRANCH }
        git reset
        git clean -f
        git rm "$env:package_name-*.$env:package_ext0" "$env:package_name-*.$env:package_ext1"

        Move-Item -Path ..\nCine-build-${{ matrix.BuildType }}\$env:package_file_name.$env:package_ext0 -Destination .
        Move-Item -Path ..\nCine-build-${{ matrix.BuildType }}\$env:package_file_name.$env:package_ext1 -Destination .
        git add "$env:package_file_name.$env:package_ext0" "$env:package_file_name.$env:package_ext1"

        git commit --amend -m "$env:DEPLOY_MESSAGE"; if (-not $?) { git commit -m "$env:DEPLOY_MESSAGE" }
        git push --force; if (-not $?) { git push --set-upstream origin $env:DEPLOY_BRANCH }
