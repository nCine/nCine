name: 'Linux'

env:
  LIBRARIES_BRANCH: libraries-OS-COMPILER
  DEPLOY_MESSAGE:
    "Push artifact from GitHub Actions build ${{ github.run_number }} with id ${{ github.run_id }}

     - nCine artifact from branch 'BRANCH_NAME' with commit id ${{ github.sha }}"
  DEPLOY_BRANCH: nCine-BRANCH_NAME-OS-COMPILER
  NUM_THREADS: 2

on: [push, workflow_dispatch]

jobs:
  Linux:
    strategy:
      fail-fast: false
      matrix:
        include:
        - BuildType: Debug
          CC: gcc
          CXX: g++

        - BuildType: Release
          CC: gcc
          CXX: g++

        - BuildType: DevDist
          CC: gcc
          CXX: g++

        - BuildType: LuaDist
          CC: gcc
          CXX: g++

        - BuildType: Debug
          CC: clang
          CXX: clang++

        - BuildType: Release
          CC: clang
          CXX: clang++

        - BuildType: DevDist
          CC: clang
          CXX: clang++

        - BuildType: LuaDist
          CC: clang
          CXX: clang++

    runs-on: 'ubuntu-22.04'

    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4

    - name: 'Install Build Dependencies'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-dev
        if [[ "${{ matrix.BuildType }}" == "DevDist" && "${{ matrix.CC }}" == "gcc" ]]; then
          sudo apt-get install -y doxygen graphviz
        fi

    - name: 'Unshallow Git Repository for Versioning'
      if: matrix.BuildType == 'DevDist' || matrix.BuildType == 'LuaDist'
      run: |
        git fetch --unshallow || true

    - name: 'Download nCine-libraries Artifacts and nCine-data'
      run: |
        export OS=linux
        export CC=${{ matrix.CC }}

        export LIBRARIES_BRANCH=`echo $LIBRARIES_BRANCH | sed 's/OS/'"$OS"'/'`
        export LIBRARIES_BRANCH=`echo $LIBRARIES_BRANCH | sed 's/COMPILER/'"$CC"'/'`

        cd ..
        git clone https://github.com/nCine/nCine-libraries-artifacts.git
        cd nCine-libraries-artifacts
        git checkout $LIBRARIES_BRANCH
        LIBRARIES_FILE=$(ls -t | head -n 1) && tar xpzf $LIBRARIES_FILE
        mv nCine-external ..
        git checkout android-libraries-armeabi-v7a
        LIBRARIES_FILE=$(ls -t | head -n 1) && tar xpzf $LIBRARIES_FILE
        git checkout android-libraries-arm64-v8a
        LIBRARIES_FILE=$(ls -t | head -n 1) && tar xpzf $LIBRARIES_FILE
        git checkout android-libraries-x86_64
        LIBRARIES_FILE=$(ls -t | head -n 1) && tar xpzf $LIBRARIES_FILE
        mv nCine-android-external ..
        cd ..
        rm -rf nCine-libraries-artifacts

        git clone https://github.com/nCine/nCine-data.git

    - name: 'Download RenderDoc API Header'
      if: matrix.BuildType != 'DevDist' && matrix.BuildType != 'LuaDist'
      run: |
        mkdir ../RenderDoc
        cd ../RenderDoc
        curl -fsSL https://raw.githubusercontent.com/baldurk/renderdoc/v1.x/renderdoc/api/app/renderdoc_app.h -o renderdoc_app.h

    - name: 'CMake Configuration, Make and Test'
      if: matrix.BuildType != 'DevDist' && matrix.BuildType != 'LuaDist'
      run: |
        export CC=${{ matrix.CC }}
        export CXX=${{ matrix.CXX }}

        export CMAKE_ARGS="-B ../nCine-buildtests-${{ matrix.BuildType }} -D CMAKE_BUILD_TYPE=${{ matrix.BuildType }} -D NCINE_OPTIONS_PRESETS=UnitTests -D CMAKE_PREFIX_PATH=$(pwd)/../nCine-external"

        cmake $CMAKE_ARGS
        make -j $NUM_THREADS -C ../nCine-buildtests-${{ matrix.BuildType }}
        cd ../nCine-buildtests-${{ matrix.BuildType }}
        ctest -j $NUM_THREADS --build-config ${{ matrix.BuildType }}

    - name: 'CMake Configuration'
      run: |
        export CC=${{ matrix.CC }}
        export CXX=${{ matrix.CXX }}

        if [[ "${{ matrix.BuildType }}" == "DevDist" || "${{ matrix.BuildType }}" == "LuaDist" ]]; then
          export CMAKE_ARGS="-B ../nCine-build-${{ matrix.BuildType }} -D CMAKE_BUILD_TYPE=Release -D NCINE_OPTIONS_PRESETS=${{ matrix.BuildType }} -D CMAKE_INSTALL_PREFIX='' -D NDK_DIR=$ANDROID_NDK_LATEST_HOME"
        else
          export CMAKE_ARGS="-B ../nCine-build-${{ matrix.BuildType }} -D CMAKE_BUILD_TYPE=${{ matrix.BuildType }} -D NCINE_BUILD_BENCHMARKS=ON -D NCINE_WITH_TRACY=ON"
        fi
        export CMAKE_ARGS="$CMAKE_ARGS -D NCINE_WITH_RENDERDOC=ON -D RENDERDOC_DIR=$(pwd)/../RenderDoc -D CMAKE_PREFIX_PATH=$(pwd)/../nCine-external"

        cmake $CMAKE_ARGS

    - name: 'Make'
      run: |
        make -j $NUM_THREADS -C ../nCine-build-${{ matrix.BuildType }}

    - name: 'Package'
      if: matrix.BuildType == 'DevDist' || matrix.BuildType == 'LuaDist'
      run: |
        make package -C ../nCine-build-${{ matrix.BuildType }}

    - name: 'Generate and Push Documentation'
      if: matrix.BuildType == 'DevDist' && matrix.CC == 'gcc'
      env:
        PUBLIC_REPO_TOKEN: ${{ secrets.PUBLIC_REPO_TOKEN }}
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        export BRANCH_NAME=$(git describe --tags --exact-match 2> /dev/null || git symbolic-ref -q --short HEAD || git rev-parse --short HEAD)

        cd ../nCine-build-${{ matrix.BuildType }}
        doxygen

        cp -p *ncine*.so ../nCine/scripts
        cd ../nCine/scripts
        LD_LIBRARY_PATH=../../nCine-external/lib ../../nCine-external/bin/lua export_lua_api_list.lua
        mv nCine_Lua_API_list.adoc ../../nCine-build-${{ matrix.BuildType }}
        cd ../../nCine-build-${{ matrix.BuildType }}
        export GEM_HOME=~/.gem
        export GEM_PATH=~/.gem
        gem install asciidoctor
        export PATH=$GEM_HOME/bin:$PATH
        asciidoctor nCine_Lua_API_list.adoc

        cd ..
        git clone https://$PUBLIC_REPO_TOKEN@github.com/nCine/docs.git >/dev/null 2>&1
        cd docs
        git rm -r $BRANCH_NAME >/dev/null 2>&1
        cp -Rp ../nCine-build-${{ matrix.BuildType }}/docs/html $BRANCH_NAME
        git add $BRANCH_NAME

        git rm lua_api_list_${BRANCH_NAME}.html || true
        cp -p ../nCine-build-${{ matrix.BuildType }}/nCine_Lua_API_list.html lua_api_list_${BRANCH_NAME}.html
        git add lua_api_list_${BRANCH_NAME}.html

        git commit --amend -m "Initial commit" || git commit -m "Initial commit"
        git push --force || git push --set-upstream origin master

    - name: 'Push Artifacts'
      if: matrix.BuildType == 'DevDist' || matrix.BuildType == 'LuaDist'
      env:
        PUBLIC_REPO_TOKEN: ${{ secrets.PUBLIC_REPO_TOKEN }}
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"

        export BRANCH_NAME=$(git describe --tags --exact-match 2> /dev/null || git symbolic-ref -q --short HEAD || git rev-parse --short HEAD)
        export DEPLOY_MESSAGE=`sed 's/BRANCH_NAME/'"$BRANCH_NAME"'/' <<< "$DEPLOY_MESSAGE"`

        export OS=linux
        export CC=${{ matrix.CC }}
        export PACKAGE_EXT=tar.gz

        cd ../nCine-build-${{ matrix.BuildType }}
        echo -e "include(CPackConfig.cmake)\nexecute_process(COMMAND \${CMAKE_COMMAND} -E echo_append \"\${CPACK_PACKAGE_NAME}\")" > package_name.cmake
        export PACKAGE_NAME=$(cmake -P package_name.cmake)
        echo -e "include(CPackConfig.cmake)\nexecute_process(COMMAND \${CMAKE_COMMAND} -E echo_append \"\${CPACK_PACKAGE_FILE_NAME}\")" > package_file_name.cmake
        export PACKAGE_FILE_NAME=$(cmake -P package_file_name.cmake)

        cd ..
        export DEPLOY_BRANCH=`echo $DEPLOY_BRANCH | sed 's/BRANCH_NAME/'"$BRANCH_NAME"'/'`
        export DEPLOY_BRANCH=`echo $DEPLOY_BRANCH | sed 's/OS/'"$OS"'/'`
        export DEPLOY_BRANCH=`echo $DEPLOY_BRANCH | sed 's/COMPILER/'"$CC"'/'`
        git clone https://$PUBLIC_REPO_TOKEN@github.com/nCine/nCine-artifacts.git >/dev/null 2>&1
        cd nCine-artifacts
        git checkout $DEPLOY_BRANCH || git checkout --orphan $DEPLOY_BRANCH
        git reset
        git clean -f
        git rm $PACKAGE_NAME-*.$PACKAGE_EXT || true
        mv -f ../nCine-build-${{ matrix.BuildType }}/$PACKAGE_FILE_NAME.$PACKAGE_EXT .
        git add $PACKAGE_FILE_NAME.$PACKAGE_EXT
        git commit --amend -m "$DEPLOY_MESSAGE" || git commit -m "$DEPLOY_MESSAGE"
        git push --force || git push --set-upstream origin $DEPLOY_BRANCH
